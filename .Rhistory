edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(600,500),
label=c("Varer/Ydelser","Penge/modydelse"),
font.size = c(15,15),
smooth = c(TRUE,TRUE)
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 300) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c(" Testator "," Arving "),font.size = c(30,30))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to"),
length = c(300),
font.size = c(15),
label=c(" ARV "),
smooth = FALSE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 300) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c("Sælger \n tilbudsgiver ","Køber \n tilbudsmodtager "),font.size = c(15,15))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(800,500),
font.size = c(12,12),
label=c("1. Sælger sender tilbud til køber","2. Køber sender accept/ordre"),
smooth = TRUE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 400) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c("Sælger \n tilbudsmodtager ","Køber \n tilbudsgiver "),font.size = c(20,20))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(800,500),
label=c("2. Sælger sender \n accept/ordrebekræftelse","1. Køber sender købstilbud/ordre"),
smooth = TRUE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 400) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
options(knitr.table.format = "html")
collapse_rows_dt <- data.frame(Regel = c("Koncipistreglen", "Minimumsreglen","Prioritetsreglen", "Gyldighedsreglen","Rimelighedsreglen"),
Fortolkning = c("Dette fortolkningsprincip er også benævnt som uklarhedsreglen og betyder, at den part som har konciperet (skrevet) kontrakten må bære risikoen for tvetydighed. Er der en uklarhed i kontrakten, tolkes aftalen til skade eller ugunst for koncipisten og dermed mindst tyngende for den anden part, som ikke har haft indflydelse på aftalens formulering. Uklarhedsreglen er særlig relevant ved fortolkning af standardaftaler, der er udarbejdet af en stærk part.",
"Hvis der er tvivl om, hvad løftegiveren har forpligtet sig til i aftalen, vælges den forståelse af aftalen, som er
mest gunstig for løftegiveren. Hvis der fx er tvivl, om der er aftalt simpel kaution eller selvskyldnerkaution, vælges simpel kaution, der er mest gunstig for forbrugeren. Særligt hvad angår forbrugeraftaler, har minimumsreglen fundet en plads i AFTL § 38b. Bestemmelsen beskytter forbrugeren i de tilfælde, hvor et tyngende aftalevilkår ikke har været til forhandling med en erhvervsdrivende aftalepart. En sådan aftale skal tolkes på den måde, som er mest gunstig for forbrugeren.
",
"Ved fortolkning efter prioritetsreglen går et specielt vilkår forud for et generelt vilkår. Man kan også kalde det en fortolkning efter et lex specialis-princip, hvor en speciel og udspecificeret bestemmelse vejer tungere end en generel formuleret bestemmelse",
"Hvis man står overfor et valg, om aftalen er gyldig og kan gennemføres, eller ugyldig og må bortfalde, er gyldighedsreglen et fortolkningsprincip, hvor aftalen tolkes med henblik på at opnå en gyldig aftale, som vil kunne gennemføres.",
"Efter rimelighedsreglen fortolker man ud fra hensigtsmæssigheds- og rimelighedsbetragtninger. Ved tvivl om forståelsen af en aftale, tolkes aftalen i overensstemmelse med, hvad der er rimeligt."))
kable(collapse_rows_dt, align = "l",caption = "Regler og tolkning") %>%
kable_styling(full_width = T,bootstrap_options = c( "hover","responsive","bordered","striped")) %>%
column_spec(1, bold = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
column_spec(1:2,  bold = F, color = "black", background = "lightgrey")%>%
column_spec(1,  bold = T,italic = TRUE)%>%
row_spec(0, bold = T, color = "white", background = "darkgrey")
# row_spec(5:9, bold = T, color = "Black", background = "yellow") %>%
# add_header_above(c( "Koncipistreglen" = 2),italic = TRUE)
options(knitr.table.format = "html")
collapse_rows_dt <- data.frame(Regel = c("Koncipistreglen", "Minimumsreglen","Prioritetsreglen", "Gyldighedsreglen","Rimelighedsreglen"),
Fortolkning = c("Dette fortolkningsprincip er også benævnt som uklarhedsreglen og betyder, at den part som har konciperet (skrevet) kontrakten må bære risikoen for tvetydighed. Er der en uklarhed i kontrakten, tolkes aftalen til skade eller ugunst for koncipisten og dermed mindst tyngende for den anden part, som ikke har haft indflydelse på aftalens formulering. Uklarhedsreglen er særlig relevant ved fortolkning af standardaftaler, der er udarbejdet af en stærk part.",
"Hvis der er tvivl om, hvad løftegiveren har forpligtet sig til i aftalen, vælges den forståelse af aftalen, som er
mest gunstig for løftegiveren. Hvis der fx er tvivl, om der er aftalt simpel kaution eller selvskyldnerkaution, vælges simpel kaution, der er mest gunstig for forbrugeren. Særligt hvad angår forbrugeraftaler, har minimumsreglen fundet en plads i aftalelovens § 38b. Lovbestemmelsen beskytter forbrugeren i de tilfælde, hvor et tyngende aftalevilkår ikke har været til forhandling med en erhvervsdrivende aftalepart. En sådan aftale skal tolkes på den måde, som er mest gunstig for forbrugeren.
",
"Ved fortolkning efter prioritetsreglen går et specielt vilkår forud for et generelt vilkår. Man kan også kalde det en fortolkning efter et lex specialis-princip, hvor en speciel og udspecificeret bestemmelse vejer tungere end en generel formuleret bestemmelse",
"Hvis man står overfor et valg, om aftalen er gyldig og kan gennemføres, eller ugyldig og må bortfalde, er gyldighedsreglen et fortolkningsprincip, hvor aftalen tolkes med henblik på at opnå en gyldig aftale, som vil kunne gennemføres.",
"Efter rimelighedsreglen fortolker man ud fra hensigtsmæssigheds- og rimelighedsbetragtninger. Ved tvivl om forståelsen af en aftale, tolkes aftalen i overensstemmelse med, hvad der er rimeligt."))
kable(collapse_rows_dt, align = "l",caption = "Regler og tolkning") %>%
kable_styling(full_width = T,bootstrap_options = c( "hover","responsive","bordered","striped")) %>%
column_spec(1, bold = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
column_spec(1:2,  bold = F, color = "black", background = "lightgrey")%>%
column_spec(1,  bold = T,italic = TRUE)%>%
row_spec(0, bold = T, color = "white", background = "darkgrey")
# row_spec(5:9, bold = T, color = "Black", background = "yellow") %>%
# add_header_above(c( "Koncipistreglen" = 2),italic = TRUE)
options(knitr.table.format = "html")
collapse_rows_dt <- data.frame(Regel = c("Koncipistreglen", "Minimumsreglen","Prioritetsreglen", "Gyldighedsreglen","Rimelighedsreglen"),
Fortolkning = c("Dette fortolkningsprincip er også benævnt som uklarhedsreglen og betyder, at den part som har konciperet (skrevet) kontrakten må bære risikoen for tvetydighed. Er der en uklarhed i kontrakten, tolkes aftalen til skade eller ugunst for koncipisten og dermed mindst tyngende for den anden part, som ikke har haft indflydelse på aftalens formulering. Uklarhedsreglen er særlig relevant ved fortolkning af standardaftaler, der er udarbejdet af en stærk part.",
"Hvis der er tvivl om, hvad løftegiveren har forpligtet sig til i aftalen, vælges den forståelse af aftalen, som er
mest gunstig for løftegiveren. Hvis der fx er tvivl, om der er aftalt simpel kaution eller selvskyldnerkaution, vælges simpel kaution, der er mest gunstig for forbrugeren. Særligt hvad angår forbrugeraftaler, har minimumsreglen fundet en plads i aftalelovens § 38b. Lovbestemmelsen beskytter forbrugeren i de tilfælde, hvor et tyngende aftalevilkår ikke har været til forhandling med en erhvervsdrivende aftalepart. En sådan aftale skal tolkes på den måde, som er mest gunstig for forbrugeren.
",
"Ved fortolkning efter prioritetsreglen går et specielt vilkår forud for et generelt vilkår. Man kan også kalde det en fortolkning efter et lex specialis-princip, hvor en speciel og udspecificeret bestemmelse vejer tungere end en generel formuleret bestemmelse",
"Hvis man står overfor et valg, om aftalen er gyldig og kan gennemføres, eller ugyldig og må bortfalde, er gyldighedsreglen et fortolkningsprincip, hvor aftalen tolkes med henblik på at opnå en gyldig aftale, som vil kunne gennemføres.",
"Efter rimelighedsreglen fortolker man ud fra hensigtsmæssigheds- og rimelighedsbetragtninger. Ved tvivl om forståelsen af en aftale, tolkes aftalen i overensstemmelse med, hvad der er rimeligt."))
kable(collapse_rows_dt, align = "l",caption = "Regler og tolkning") %>%
kable_styling(full_width = T,bootstrap_options = c( "hover","responsive","bordered","striped")) %>%
column_spec(1, bold = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
column_spec(1:2,  bold = F, color = "black", background = "lightgrey")%>%
column_spec(1,  bold = T,italic = TRUE)%>%
row_spec(0, bold = T, color = "white", background = "darkgrey")
# row_spec(5:9, bold = T, color = "Black", background = "yellow") %>%
# add_header_above(c( "Koncipistreglen" = 2),italic = TRUE)
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
cat(readLines('np.html'))
nodes <- data.frame(id = 1:7,
shape = c("box"),
label = c(" Aftalelov "," Forsikringsaftalelov "," Kreditaftalelov "," Forbrugeraftalelov "," Aftale om pant "," Købelov "," Kautionsaftale "),
font.size = c(50,25,25,25,25,25,25))
edges <- data.frame(from = c(1,1,1,1,1,1), to = c(2,3,4,5,6,7),arrows = c("to"),length = rep(40,6))
visNetwork(nodes, fig.width=4,edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 300) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
# visLayout(randomSeed = 24) # to have always the same network
nodes <- data.frame(id = 1:2, shape = c("box"),label = c(" Sælger "," Køber "),font.size = c(30,30))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(600,500),
label=c("Varer/Ydelser","Penge/modydelse"),
font.size = c(15,15),
smooth = c(TRUE,TRUE)
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 300) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c(" Testator "," Arving "),font.size = c(30,30))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to"),
length = c(300),
font.size = c(15),
label=c(" ARV "),
smooth = FALSE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 300) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c("Sælger \n tilbudsgiver ","Køber \n tilbudsmodtager "),font.size = c(15,15))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(800,500),
font.size = c(12,12),
label=c("1. Sælger sender tilbud til køber","2. Køber sender accept/ordre"),
smooth = TRUE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 400) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c("Sælger \n tilbudsmodtager ","Køber \n tilbudsgiver "),font.size = c(20,20))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(800,500),
label=c("2. Sælger sender \n accept/ordrebekræftelse","1. Køber sender købstilbud/ordre"),
smooth = TRUE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 400) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
library(timevis)
install.packages("timevis")
library(timevis)
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
if (!require("pacman")) install.packages("pacman")
pacman::p_load("rio", "exams")
library(readxl)
da14 <- read_excel("Danskernes Arbejdsliv 2014.xlsx")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
training.data.raw <- read.csv('train.csv',header=T,na.strings=c(""))
install.packages("titanic")
library(titanic)
Titanic
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
nodes <- data.frame(id = 1:3,
shape = c("box"),
level = c(1,2,2),
label = c("Lovgivende magt \n Folketinget",    "Dømmende magt \n Domstolene","Udøvende magt \n Regeringen"),
font.size = c(26,26,26))
edges <- data.frame(from = c(1,2,3), to = c(2,3,1),arrows = c(""),length = rep(300,3))
visNetwork(nodes, edges,  width = "100%",avoidOverlap=2) %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "UD",levelSeparation = 100) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow"))
#visLayout(randomSeed = 24) # to have always the same network
devtools::install_github("lchiffon/wordcloud2")
library(wordcloud2)
wordcloud2(demoFreq, size = 1,shape = 'star')
wordcloud2(demoFreq, size = 2, minRotation = -pi/2, maxRotation = -pi/2)
#pacman autoload evt. manglende pakker
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rio, exams, ggplot2,"randomNames",Rmisc) #load various packages
options(scipen=999) #disable scientific
n <- sample(500:1000, 1)
###################################################################################################################################################################################################
####Functions
#sc make 5 choice vector no none
sc <- function(index,value,digits){
repeat {
# do something
s4 <- sample(0:4,1)
vec <- round2(c(runif(s4,min=(value*.65),max=(value*.95)),runif(4-s4,min=(value*1.05),max=(value*1.2))),digits)
questions[[index]] <<- round2(sort(c(vec,value)),digits)
solutions[[index]] <<- mchoice2string(value==sort(c(vec,value)))
dksol[[index]] <<- questions[[index]][which(string2mchoice(solutions[[index]]))]
# exit if the condition is met
if (length(unique(questions[[index]]))>4) break
}
#sc make 5 choice vector incl none
scnone <- function(index,value,digits){
repeat {
# do something
s4 <- sample(0:5,1)
s5 <- sample(1:6,1)
value <- round2(value,digits)
ifelse(value>0,questions[[index]] <<- round2(sort(c(runif(s4,min=(value*.65),max=(value*.95)),runif(5-s4,min=(value*1.05),max=(value*1.2)),value)),digits)[-s5],questions[[index]] <<- round2(sort(c(runif(s4,min=(value*.95),max=(value*.65)),runif(5-s4,min=(value*1.2),max=(value*1.05)),value)),digits)[-s5])
solutions[[index]] <<- mchoice2string(value==questions[[index]])
dksol[[index]] <<- value
if(as.numeric(solutions[[index]])>=1){
questions[[index]] <<- c(questions[[index]],"Ikke nævnt")
(solutions[[index]] <<- paste0(solutions[[index]],0))
# dksol[[index]] <<- "Ikke nævnt"
} else{
questions[[index]] <<- c(questions[[index]],"Ikke nævnt")
solutions[[index]] <<- "000001"
}
# exit if the condition is met
if(length(unique(questions[[index]]))>5) break
}
#sch make vector first index in val vector is true
sch <- function(index,val){
questions[[index]] <<- sort(c(val))
solutions[[index]] <<- mchoice2string(val[1]==questions[[index]])
dksol[[index]] <<- questions[[index]][which(string2mchoice(solutions[[index]]))]
}
# Any test arg index pv signif alt=c(2,3,4) 3 greater 4 less
sctest <- function(index,pv,signif,alt){
questions[[index]] <<- c("mindre end","større end")
questions[[index+1]] <<- c("forkaste","ikke forkaste")
questions[[index+2]] <<- c("Da p-værdien er mindre end 1% er vi rimeligt sikre på konklusionen.","Bemærk konklusionen er niveaufølsom.","Da p-værdien er større end 10% er vi rimeligt sikre på konklusionen.")
questions[[index+3]] <<- c("er den samme som","er forskellig fra","højst er lig med","er større end","mindst er lig med","er mindre end")
solutions[[index]] <<- mchoice2string(c(pv<signif,pv>=signif))
solutions[[index+1]] <<- mchoice2string(c(pv<signif,pv>=signif))
solutions[[index+2]] <<- mchoice2string(c(pv<1,pv>=1 && pv<=10,pv>10))
solutions[[index+3]] <<- mchoice2string(c(pv>=signif && alt==2 ,pv<signif && alt==2,pv>=signif && alt==3,pv<signif && alt==3,pv>=signif && alt==4,pv<signif && alt==4))
dksol[[index]] <<- questions[[index]][which(string2mchoice(solutions[[index]]))]
dksol[[index+1]] <<- questions[[index+1]][which(string2mchoice(solutions[[index+1]]))]
dksol[[index+2]] <<- questions[[index+2]][which(string2mchoice(solutions[[index+2]]))]
dksol[[index+3]] <<- questions[[index+3]][which(string2mchoice(solutions[[index+3]]))]
}

## QUESTION/SOLUTION
nqu <- 21
questions <- solutions <- rep(list(""), nqu)
type <- rep(list("schoice"), nqu)
dksol <- rep(list(""), nqu)
mu <- round2(sample(5000:20000,1),-3)
sigma <- round2(sample((0.05*mu):(0.2*mu),1),-.5)
xg <- mu+sigma
xl <- mu-sigma
scnone(index = 1,value = round2((1-pnorm(xg,mu,sigma))*100,2),digits = 2) #større end mu
scnone(index = 2,value = round2((pnorm(xg,mu,sigma))*100,2),digits = 2) #større end mu
scnone(index = 3,value = round2((pnorm(xl,mu,sigma))*100,2),digits = 2) #mindre end mu
scnone(index = 4,value = round2((1-pnorm(xl,mu,sigma))*100,2),digits = 2) #mindre end mu
scnone(index = 5,value = round2((pnorm(mu,mu,sigma))*100,2),digits = 2)
sch(6,c("bliver det samme som","mindre end","mere end"))
sch(7,c("punktsandsynligheden er 0","punktsandsynligheden er mere end 0","punktsandsynligheden er mindre end 0"))
mu8 <- round2(mu*rnorm(1,1,.1),0)
scnone(index = 8,value = round2((pnorm(mu8,mu,sigma))*100,0),digits = 0)
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
